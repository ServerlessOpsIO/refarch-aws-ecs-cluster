Parameters:
  StackParentName:
    Type: String
    Description: "Name of parent stack"

  StackSsmParamPrefix:
    Type: String
    Description: "Prefix for SSM Params created by this stack"

  VpcId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::VPC::Id>
    Description: "VPC ID"

  VpcSubnets:
    Type: AWS::SSM::Parameter::Value<List<AWS::EC2::Subnet::Id>>
    Description: "VPC Subnets ALB will cover"

  AlbSecurityGroupId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::SecurityGroup::Id>
    Description: "ALB Security Group Id"

  EcsAmi:
    Description: "ECS-Optimized AMI ID"
    Type: String

  EcsInstanceType:
    Description: "Instance type for ECS hosts"
    Type: String

  EcsClusterSizeDesired:
    Description: "Desired number of ECS hosts"
    Type: Number

  EcsClusterSizeMin:
    Description: "Minimum number of ECS hosts"
    Type: Number

  EcsClusterSizeMax:
    Description: "Maximum number of ECS hosts"
    Type: Number

Resources:
  # Allow access to ECS host and containers via ALB.
  #
  # NOTE: If desired add additional rule for bastion access
  EcsHostSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId:
        Ref: VpcId
      GroupDescription: "Access to the ECS hosts and containers."
      SecurityGroupIngress:
        - SourceSecurityGroupId:
            Ref: AlbSecurityGroupId
          IpProtocol: -1
      Tags:
        - Key: Name
          Value:
            Fn::Sub: "${StackParentName}-hosts"

  EcsCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName:
        Ref: StackParentName

  EcsAutoScalingGroup:
    DependsOn: EcsCluster
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        Ref: VpcSubnets
      LaunchConfigurationName:
        Ref: EcsLaunchConfiguration
      MinSize:
        Ref: EcsClusterSizeMin
      MaxSize:
        Ref: EcsClusterSizeMax
      DesiredCapacity:
        Ref: EcsClusterSizeDesired
      Tags:
        - Key: Name
          Value:
            Fn::Sub: "${StackParentName} ECS host"
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
        MaxBatchSize: 1
        PauseTime: PT15M
        SuspendProcesses:
          - HealthCheck
          - ReplaceUnhealthy
          - AZRebalance
          - AlarmNotification
          - ScheduledActions
        WaitOnResourceSignals: true

  EcsLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId:
        Ref: EcsAmi
      InstanceType:
        Ref: EcsInstanceType
      SecurityGroups:
        - Ref: AlbSecurityGroupId
      IamInstanceProfile:
        Ref: EcsInstanceProfile
      UserData:
        Fn::Base64:
          Fn::Sub: |
            #!/bin/bash
            yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
            yum install -y https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm
            yum install -y aws-cfn-bootstrap hibagent
            /opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource EcsLaunchConfiguration
            /opt/aws/bin/cfn-signal -e $? --region ${AWS::Region} --stack ${AWS::StackName} --resource EcsAutoScalingGroup
            /usr/bin/enable-ec2-spot-hibernation

    Metadata:
      AWS::CloudFormation::Init:
        config:
          packages:
            yum:
              collectd: []

          commands:
            01_add_instance_to_cluster:
              command:
                Fn::Sub: "echo ECS_CLUSTER=${EcsCluster} >> /etc/ecs/ecs.config"
            02_enable_cloudwatch_agent:
              command:
                Fn::Sub: "/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c ssm:${EcsCloudWatchParameter} -s"
          files:
            /etc/cfn/cfn-hup.conf:
              mode: 000400
              owner: root
              group: root
              content:
                Fn::Sub: |
                  [main]
                  stack=${AWS::StackId}
                  region=${AWS::Region}
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content:
                Fn::Sub: |
                  [cfn-auto-reloader-hook]
                  triggers=post.update
                  path=Resources.EcsLaunchConfiguration.Metadata.AWS::CloudFormation::Init
                  action=/opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource EcsLaunchConfiguration
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf



  EcsRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      RoleName:
        Fn::Sub: "${StackParentName}-ECSRole-${AWS::Region}"
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Action": "sts:AssumeRole",
                "Effect": "Allow",
                "Principal": {
                    "Service": "ec2.amazonaws.com"
                }
            }]
        }
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      Policies:
        - PolicyName: ecs-service
          PolicyDocument: |
            {
                "Statement": [{
                    "Effect": "Allow",
                    "Action": [
                        "ecs:CreateCluster",
                        "ecs:DeregisterContainerInstance",
                        "ecs:DiscoverPollEndpoint",
                        "ecs:Poll",
                        "ecs:RegisterContainerInstance",
                        "ecs:StartTelemetrySession",
                        "ecs:Submit*",
                        "ecr:BatchCheckLayerAvailability",
                        "ecr:BatchGetImage",
                        "ecr:GetDownloadUrlForLayer",
                        "ecr:GetAuthorizationToken"
                    ],
                    "Resource": "*"
                }]
            }

  EcsInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - Ref: EcsRole

  EcsServiceAutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Action:
            - "sts:AssumeRole"
          Effect: Allow
          Principal:
            Service:
              - application-autoscaling.amazonaws.com
      Path: /
      Policies:
        - PolicyName: ecs-service-autoscaling
          PolicyDocument:
            Statement:
              Effect: Allow
              Action:
                - application-autoscaling:*
                - cloudwatch:DescribeAlarms
                - cloudwatch:PutMetricAlarm
                - ecs:DescribeServices
                - ecs:UpdateService
              Resource: "*"

  EcsCloudWatchParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: ECS
      Name:
        Fn::Sub: "AmazonCloudWatch-${EcsCluster}-ECS"
      Type: String
      Value:
        Fn::Sub: |
          {
            "logs": {
              "force_flush_interval": 5,
              "logs_collected": {
                "files": {
                  "collect_list": [
                    {
                      "file_path": "/var/log/messages",
                      "log_group_name": "${EcsCluster}-/var/log/messages",
                      "log_stream_name": "{instance_id}",
                      "timestamp_format": "%b %d %H:%M:%S"
                    },
                    {
                      "file_path": "/var/log/dmesg",
                      "log_group_name": "${EcsCluster}-/var/log/dmesg",
                      "log_stream_name": "{instance_id}"
                    },
                    {
                      "file_path": "/var/log/docker",
                      "log_group_name": "${EcsCluster}-/var/log/docker",
                      "log_stream_name": "{instance_id}",
                      "timestamp_format": "%Y-%m-%dT%H:%M:%S.%f"
                    },
                    {
                      "file_path": "/var/log/ecs/ecs-init.log",
                      "log_group_name": "${EcsCluster}-/var/log/ecs/ecs-init.log",
                      "log_stream_name": "{instance_id}",
                      "timestamp_format": "%Y-%m-%dT%H:%M:%SZ"
                    },
                    {
                      "file_path": "/var/log/ecs/ecs-agent.log.*",
                      "log_group_name": "${EcsCluster}-/var/log/ecs/ecs-agent.log",
                      "log_stream_name": "{instance_id}",
                      "timestamp_format": "%Y-%m-%dT%H:%M:%SZ"
                    },
                    {
                      "file_path": "/var/log/ecs/audit.log",
                      "log_group_name": "${EcsCluster}-/var/log/ecs/audit.log",
                      "log_stream_name": "{instance_id}",
                      "timestamp_format": "%Y-%m-%dT%H:%M:%SZ"
                    }
                  ]
                }
              }
            },
            "metrics": {
              "append_dimensions": {
                "AutoScalingGroupName": "${!aws:AutoScalingGroupName}",
                "InstanceId": "${!aws:InstanceId}",
                "InstanceType": "${!aws:InstanceType}"
              },
              "metrics_collected": {
                "collectd": {
                  "metrics_aggregation_interval": 60
                },
                "disk": {
                  "measurement": [
                    "used_percent"
                  ],
                  "metrics_collection_interval": 60,
                  "resources": [
                    "/"
                  ]
                },
                "mem": {
                  "measurement": [
                    "mem_used_percent"
                  ],
                  "metrics_collection_interval": 60
                },
                "statsd": {
                  "metrics_aggregation_interval": 60,
                  "metrics_collection_interval": 10,
                  "service_address": ":8125"
                }
              }
            }
          }

