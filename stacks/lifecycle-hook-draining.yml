Parameters:
  AsgTerminationSnsTopicArn:
    Type: AWS::SSM::Parameter::Value<String>
    Description: "SNS termination topic ARN"

  EcsClusterName:
    Type: AWS::SSM::Parameter::Value<String>
    Description: "ECS cluster name"

  LifecycleHookLambdaPolicyArn:
    Type: AWS::SSM::Parameter::Value<String>
    Description: "ARN of lifecycle hook Lambda default IAM policy"


Resources:
  LambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AutoScalingNotificationAccessRole"
        - Ref: LifecycleHookLambdaPolicyArn

  LambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName:
        Ref: LifecycleHandlerFunction
      Action: "lambda:InvokeFunction"
      Principal: sns.amazonaws.com
      SourceArn:
        Ref: AsgTerminationSnsTopicArn

  LifecycleHandlerFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: index.lambda_handler
      Description: "Handle draining tasks from ECS hosts being terminated."
      Environment:
        Variables:
          CLUSTER:
            Ref: EcsClusterName
      Code:
        ZipFile:
          Fn::Join:
            - ""
            - - |
                import boto3,json,os,time
                ec2Client = boto3.client('ec2')
                ecsClient = boto3.client('ecs')
                autoscalingClient = boto3.client('autoscaling')
                snsClient = boto3.client('sns')
                lambdaClient = boto3.client('lambda')
                def publishSNSMessage(snsMessage,snsTopicArn):
                    response = snsClient.publish(TopicArn=snsTopicArn,Message=json.dumps(snsMessage),Subject='reinvoking')
                def setContainerInstanceStatusToDraining(ecsClusterName,containerInstanceArn):
                    response = ecsClient.update_container_instances_state(cluster=ecsClusterName,containerInstances=[containerInstanceArn],status='DRAINING')
                def tasksRunning(ecsClusterName,ec2InstanceId):
                    ecsContainerInstances = ecsClient.describe_container_instances(cluster=ecsClusterName,containerInstances=ecsClient.list_container_instances(cluster=ecsClusterName)['containerInstanceArns'])['containerInstances']
                    for i in ecsContainerInstances:
                        if i['ec2InstanceId'] == ec2InstanceId:
                            if i['status'] == 'ACTIVE':
                                setContainerInstanceStatusToDraining(ecsClusterName,i['containerInstanceArn'])
                                return 1
                            if (i['runningTasksCount']>0) or (i['pendingTasksCount']>0):
                                return 1
                            return 0
                    return 2
                def lambda_handler(event, context):
                    ecsClusterName=os.environ['CLUSTER']
                    snsTopicArn=event['Records'][0]['Sns']['TopicArn']
                    snsMessage=json.loads(event['Records'][0]['Sns']['Message'])
                    lifecycleHookName=snsMessage['LifecycleHookName']
                    lifecycleActionToken=snsMessage['LifecycleActionToken']
                    asgName=snsMessage['AutoScalingGroupName']
                    ec2InstanceId=snsMessage['EC2InstanceId']
                    checkTasks=tasksRunning(ecsClusterName,ec2InstanceId)
                    if checkTasks==0:
                        try:
                            response = autoscalingClient.complete_lifecycle_action(LifecycleHookName=lifecycleHookName,AutoScalingGroupName=asgName,LifecycleActionToken=lifecycleActionToken,LifecycleActionResult='CONTINUE')
                        except BaseException as e:
                            print(str(e))
                    elif checkTasks==1:
                        time.sleep(5)
                        publishSNSMessage(snsMessage,snsTopicArn)
      Role:
        Fn::GetAtt:
          - LambdaExecutionRole
          - Arn
      Runtime: python3.6
      Timeout: 10

  AsgTerminationSnsSubscription:
    Type: "AWS::SNS::Subscription"
    Properties:
      TopicArn:
        Ref: AsgTerminationSnsTopicArn
      Protocol: lambda
      Endpoint:
        Fn::GetAtt:
          - LifecycleHandlerFunction
          - Arn

